language: python
cache:
  directories:
  - "$PIP_CACHE_DIR"
  - "$PIPENV_CACHE_DIR"
env:
  global:
  - PIP_CACHE_DIR=$HOME/.cache/pip
  - PIPENV_CACHE_DIR=$HOME/.cache/pipenv
  - PIPENV_VENV_IN_PROJECT=yes
matrix:
  fast_finish: true
  include:
  - name: Xenial Linux
    python: '3.7'
    dist: xenial
    env:
    - PIPENV_VERBOSITY=-1
    - COVERAGE_ARGS="--cov=./src/main/python"
    - PBIN=pip3
    - PRUN="pipenv run"
    before_install:
    - pip3 install --upgrade pip
    after_success:
    - bash <(curl -s https://codecov.io/bash)
  - name: OSX
    os: osx
    osx_image: xcode10.2
    language: shell
    env:
    - PBIN=pip3
    - PRUN="pipenv run"
    before_install:
    - pip3 install --upgrade pip
  - name: Conda on Windows
    os: windows
    language: shell
    env:
    - PATH="/c/tools/miniconda3/:/c/tools/miniconda3/Library/mingw-w64:/c/tools/miniconda3/Library/usr/bin:/c/tools/miniconda3/Library/bin:/c/tools/miniconda3/Scripts:/c/tools/miniconda3/bin:$PATH"
    - PBIN=pip
    - PRUN=
    before_install:
    - choco install miniconda3 openssl.light nsis
    - conda config --set always_yes yes --set changeps1 no
    - conda update -n base -c defaults conda python
    - conda create -q -n test python=$TRAVIS_PYTHON_VERSION scipy numpy
    - source activate test
    - python -m pip install --upgrade pip
    install:
    - pip install pipenv
    - pipenv lock -r | tail -n +2  > requirements.txt
    - pip install -r requirements.txt
    - pipenv lock -r --dev | tail -n +2 > requirements.txt
    - pip install -r requirements.txt
    - conda list
    - pip list
  - name: Pip on Windows
    os: windows
    language: shell
    env:
    - NO_MKL=Y
    - PBIN=pip
    - PRUN="pipenv run"
    - PATH=/c/Python37:/c/Python37/Scripts:$PATH
    before_install:
    - choco install python --version=3.7.5
    - choco install openssl.light nsis
addons:
  apt:
    packages:
    - libblas-dev
    - liblapack-dev
  homebrew:
    packages:
    - pipenv
install:
- $PBIN install pipenv
- pipenv install -d
- $PBIN list
- pipenv run $PBIN list
before_script:
- |
  if [[ -n ${TRAVIS_TAG} ]]
  then
    echo $TRAVIS_TAG > src/main/python/VERSION
  fi
script:
- PYTHONPATH=./src/main/python $PRUN pytest $COVERAGE_ARGS
before_deploy:
- $PRUN $PBIN install https://github.com/pyinstaller/pyinstaller/archive/develop.zip
- $PRUN pyinstaller --clean --log-level=INFO ${DEBUG_FLAG} -F pypolarmap.spec
- |
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]
  then
    pushd dist
    rm pypolarmap
    zip -r pypolarmap.app.zip pypolarmap.app
    rm -Rf pypolarmap.app
    popd
  elif [[ "$TRAVIS_OS_NAME" == "windows" ]]
  then
    export USE_NSIS=Y
    mv dist/pypolarmap.exe dist/bak.exe
    $PRUN pyinstaller --clean --log-level=INFO -D pypolarmap.spec
    "/c/Program Files (x86)/NSIS/makensis.exe" src/main/nsis/Installer.nsi
    mv dist/bak.exe dist/pypolarmap.exe
  fi
- |
  if [[ "$NO_MKL" == "Y" ]]
  then
    mv dist/pypolarmap.exe dist/pypolarmap_small.exe
    mv dist/pypolarmapSetup.exe dist/pypolarmapSetup_small.exe
  fi
deploy:
  provider: releases
  api_key:
    secure: j7kTuSIZVee4IMNDgX/O5Ue1gkr64Myo1c61SWKN4DoHdKXeNbqn1QeWBKlKqWhAaXPmC8sATaiFv30KEtvmTfg0a3fe9/daDRWqimvq9NBw9DiQojc+P/3rIQV/6E4g0g4Aby5bLyNcxKvONQO9T+TBxxCW/ZznwM2OsUlGdBwOX7lGjmQL0qO+PkvOa54UZIxXIWf2KOr0MQaolBlPXO1nIcum4PDXugPzdmEmUkQvgT2j+XSRlnl6WUEdjx9LoG8jjYn2Hk46t8Gofk7ETRXAgKkpZD+uTAjStCpYZRbPOUNYoWGdyDE5SirR96R76EECM7tm17MjRVriKZnP1uICLy/jfN+Bs26dC3P3pyNHf/5nkffuDp6Wk7u+MkGMhS2zBnDLrAa3zgvsC4A7ZppYlyeJmJIWazY+L+LhS/2Y+B0CIwpBUDnTxzdolGm7bc1xmHkZiY/jxGZHi1jpCxEUotShnbOAkLNGFLzDT7BQqsB04HdETA74j+OcxcJ72J+EWuLY+n62NJcYU6eSa0Q9lOvT/VVDQWGDghAzLTiEgo1XQDyRbj+1sl8IaBrbzlSs+gIyFWw+Svw9hsfITrxzomXrGwit+a9g+SUVl1LTMY2z410OYvLzlwS+MMpV0r805FlQluQZuJEy1iQxs9NHBnA3FjfxkvGlX6rnjMo=
  file_glob: true
  file: dist/pypolarmap*
  on:
    repo: 3ll3d00d/pypolarmap
    branch: travis
    tags: true
  skip_cleanup: true
  prerelease: true